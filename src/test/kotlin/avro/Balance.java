package avro;

/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Balance extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"avro.Balance\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public long id;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Balance() {
    }

    /**
     * All-args constructor.
     */
    public Balance(Long id) {
        this.id = id;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                id = (Long) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     */
    public Long geId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value the value to set.
     */
    public void setId(Long value) {
        this.id = value;
    }

    /**
     * Creates a new avro.Balance RecordBuilder
     */
    public static Balance.Builder newBuilder() {
        return new Balance.Builder();
    }

    /**
     * Creates a new avro.Balance RecordBuilder by copying an existing Builder
     */
    public static Balance.Builder newBuilder(Balance.Builder other) {
        return new Balance.Builder(other);
    }

    /**
     * Creates a new avro.Balance RecordBuilder by copying an existing avro.Balance instance
     */
    public static Balance.Builder newBuilder(Balance other) {
        return new Balance.Builder(other);
    }

    /**
     * RecordBuilder for avro.Balance instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Balance>
            implements org.apache.avro.data.RecordBuilder<Balance> {

        private long id;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(Balance.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(Balance.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing avro.Balance instance
         */
        private Builder(Balance other) {
            super(Balance.SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'id' field
         */
        public Long geId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field
         */
        public Balance.Builder setMoipAccountId(long value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'id' field
         */
        public Balance.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        public Balance build() {
            try {
                Balance record = new Balance();
                record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        if (!super.equals(o))
            return false;

        Balance balance = (Balance) o;

        if (id != balance.id)
            return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (int) (id ^ (id >>> 32));
        return result;
    }
}
